sego$Case
sego[sego$Case=='Test']
sego[sego$Case='Test']
sego[,sego$Case=='Test']
View(subset(sego, sego$Case==Test))
View(subset(sego, sego$Case=='Test'))
test_set <- subset(sego, sego$Case=='Test')
train_set <- subset(sego, sego$Case=='Train')
set.seed(125)
modFit <- train(Class ~ .,data=train_set,method="rpart")
modFit
pred<-predict(modFit,test_set)
pred
modFit$finalModel
data(olive)
olive <- olive[,-1]
View(olive)
modFit2 <- train(Area~.,data=olive,method="ada")
modFit2 <- train(Area~.,data=olive,method="rpart")
modFit2$FinalModel
modFit2 <- train(Area ~ ., data = olive, method="rpart")
modFit2 <- train(Area ~ ., data = olive, method="rpart")
modFit2
modFit2$finalModel
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit2,newdata = as.data.frame(t(colMeans(olive))))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(trainSA)
View(subset(trainSA,c(age, alcohol, obesity, tobacco, typea, ldl)))
View(subset(trainSA,select=c(age, alcohol, obesity, tobacco, typea, ldl)))
trainSA2 <- subset(trainSA,select=c(age, alcohol, obesity, tobacco, typea, ldl))
testSA2 <- subset(testSA,select=c(age, alcohol, obesity, tobacco, typea, ldl))
modFit3 <- train(chd ~ ., data = trainSA2, method="glm", family="binomial")
testSA2 <- subset(testSA,select=c(age, alcohol, obesity, tobacco, typea, ldl, chd))
trainSA2 <- subset(trainSA,select=c(age, alcohol, obesity, tobacco, typea, ldl, chd))
modFit3 <- train(chd ~ ., data = trainSA2, method="glm", family="binomial")
modFit3
modFit3 <- glm(chd~age+alcohol+obesity+tobacco+typea+ldl,family = binomial,data = trainSA)
predictions <- predict(modelFit, trainSA)
predictions <- predict(modFit3, testSA)
predictions <- predict(modFit3, trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA,predictions)
missClass(testSA,predictions)
predictions <- predict(modFit3,trainSA,type="response")
missClass(testSA,predictions)
missClass(trainSA,predictions)
set.seed(13234)
modFit3 <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,mehod="glm",family="binomial",data=trainSA)
modFit3 <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",family="binomial",data=trainSA)
set.seed(13234)
modFit3 <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",family="binomial",data=trainSA)
predictions <- predict(modelFit, trainSA)
predictions <- predict(modFit3, trainSA)
missClass(trainSA,predictions)
missClass(testSA,predictions)
set.seed(13234)
modFit3 <- glm(chd~age+alcohol+obesity+tobacco+typea+ldl,family = binomial,data = trainSA)
predictions <- predict(modelFit, testSA, type="response")
predictions <- predict(modFit3, testSA, type="response")
missClass(testSA,predictions)
missClass(trainSA,predictions)
missClass(testSA$chd,predictions)
missClass(trainSA$chd,predictions)
set.seed(13234)
modFit3 <- glm(chd~age+alcohol+obesity+tobacco+typea+ldl,family = binomial,data = trainSA)
predictions <- predict(modFit3, trainSA, type="response")
missClass(testSA$chd,predictions)
missClass(trainSA$chd,predictions)
set.seed(13234)
modFit3 <- glm(chd~age+alcohol+obesity+tobacco+typea+ldl,family = binomial,data = trainSA)
predictions <- predict(modFit3, testSA, type="response")
missClass(testSA$chd,predictions)
missClass(trainSA$chd,predictions)
data(vowel.train)
data(vowel.test)
vtrain <- vowel.train
vtest <- vowel.test
View(vtrain)
vtrain.y <- as.factor(vtrain.y)
vtrain.y <- is.factor(vtrain.y)
is.factor(vtrain.y)
vtrain$y <- as.factor(vtrain$y)
vtest$y <- as.factor(vtest$y)
set.seed(33833)
fitControl <- trainControl(method = "none")
tgrid <- expand.grid(mtry=c(6))
modFit <- train(y ~ ., data = vtrain, method = "rf", trControl = fitControl, tuneGrid = tgrid)
varImp(modFit)
set.seed(33833)
modFit <- train(y ~ ., data = vtrain, method = "rf")
varImp(modFit)
rm(list=ls())
library(AppliedPredictiveModeling)
library(caret)
(library ElemStatLearn)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(lubridate)
library(forecast)
install.packages("forecast")
library(forecast)
library(e1071)
data(vowel.train)
data(vowel.test)
vTrain <- vowel.train
vTrain <- vowel.test
vTrain <- vowel.train
vest <- vowel.test
rm(vest)
vTest <- vowel.test
vTrain$y <- as.factor(vTrain$y)
vTest$y <- as.factor(vTest$y)
set.seed(33833)
fitRf <- train(y~.,data=vTrain,method="rf")
fitGbm <- train(y~.,data=vTrain,method="gbm")
predRf <- predict(fitRf,vTest)
predGbm <- predict(fitGbm,vTest)
predRf
cmRf <- confusionMatrix(predRf)
cmRf <- confusionMatrix(predRf,fitRf)
cmRf <- confusionMatrix(predRf,vTest$y)
cmGbm <- confusionMatrix(predGbm,vTest$y)
cmRf
cmGbm
predc <- data.frame(predRf,predGbm,y=vTest$y)
fitComb <- train(y~.,method="gam",data=predc)
predComb <- predict(fitComb,predc)
cmComb <- (predComb,predc$y)
cmComb <- predict(predComb,predc$y)
cmComb
cmComb <- predict(predComb,vTest$y)
rm(list=ls())
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
data(vowel.train)
data(vowel.test)
vTrain<-vowel.train
vTest<-vowel.test
vTrain$y <- as.factor(vTrain$y)
vTest$y <- as.factor(vTest$y)
set.seed(33833)
fitRf <- train(y~.,data=vTrain,method="rf")
fitGbm <-train(y~.,data=vTrain,method="gbm")
predRf <- predict(fitRf,vTest)
predGbm <- predict(fitGbm,vTest)
cmRf <- confusionMatrix(predRf,vTest$y)
cmRf
cmGbm <- confusionMatrix(predGbm,vTest$y)
predRf
predRf==predGbm
predRf
vTest$y
predGbm!=predRf
a<-c(0,1,2,3,4,5,6)
a
b<-c(0,1,2,8,9,5,6)
a!=b
b[a!=b]=0
b
predGbm1 <- predGbm
predRf1 <- predRf
predGbm1[predGbm1!=PredRf1]=0
predGbm1
predGbm1[predGbm1!=PredRf1]=as.factor(0)
predGbm1[predGbm1!=PredRf1]
predGbm1[predGbm1!=predRf1]=0
predGbm1[predGbm1!=predRf1]=as.factor(0)
predGbm1
predGbm1 <- predGbm
predGbm1
predGbm1 & predRf1
predGbm1 == predRf1
predGbm1
str(predGbm1)
predGbm1[predGbm1!=predRf1]="0"
predGbm1 <- predGbm
predGbm1[predGbm1!=predRf1]=as.factor("0")
predGbm1 <- predGbm
predGbm1 <- factor(predGbm,levels=1:12)
predGbm1[predGbm1!=predRf1]=as.factor("0")
predGbm1 <- predGbm
predGbm1 <- factor(predGbm,levels=1:12,labels(c("0","1","2","3","4","5","6","7","8","9","10","11")))
predGbm1[predGbm1!=predRf1]=as.factor("0")
predGbm1 <- predGbm
predGbm1 <- as.character(predGbm)
predGbm1
predRf1 <- as.character(predRf)
predGbm1[predRf1!=predGbm1]="0"
predGbm1<-as.factor(predGbm1)
predGbm1
cmComb <- confusionMatrix(predGbm1,vTest$y)
vTestY <- vTest$y
vTestY$factors
factors(VTestY)
levels(VTestY)
vTestY$levels
VTestY
vTestY
levels(vTestY)
l <- levels(vTestY)
l
l <- c(l,"0")
l
vTestY <- factor(vTestY,levels=1:12,labels=l)
vTestY
cmComb<-confusionMatrix(predGbm1,vTestY)
cmComb
table(predRf,predGbm)
rm(list=ls())
library(train)
library(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vTest <- vowel.test
vTrain <- vowel.train
vTest$Y <- as.factor(vTest$Y)
vTest$y <- as.factor(vTest$y)
vTrain$y <- as.factor(vTrain$y)
View(vTest)
set.seed(33833)
fitRf <- train(y~.,data=vTrain,method="rf")
fitGbm <- train(y~.,data=vTrain,method="gbm")
predRf <- predict(fitRf,vTest)
predGbm <- predict(fitGbm,vTest)
cmRf <- confusionMatrix(predRf,vTest$y)
cmGbm <- confusionMatrix(predGbm,vTest$y)
cmRf
cmGbm
predGbm == predRf
predComb <- predGbm[predGbm==predRf]
tempY <- vTest$Y[predGbm==predRf]
cmComb <- confusionMatrix[predComb,tempY]
tempY
tempy <- vTest$y[predGbm==predRf]
cmComb <- confusionMatrix[predComb,tempy]
tempy
predComb
rm(tempY)
vTest$y
cmComb <- confusionMatrix(predComb,tempy)
cmComb
rm(list=ls())
cls
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
fitRf <- train(diagnosis~.,data=training,methd="rf")
fitGbm <- train(diagnosis~.,data=training,method="gbm")
set.seed(62433)
fitRf <- train(diagnosis~.,data=training,method="rf")
fitGbm <- train(diagnosis~.,data=training,method="gbm")
fitLda <- train(diagnosis~.,data=training,method="lda")
fitLda
pred(fitRf,testing)
predRf <- predict(fitRf,testing)
predGbm <- predict(fitGbm,testing)
predLda <- predict(fitLda,testing)
predComb <- data.frame(predRf,predGbm,predLda,diagnosis=testing$diagnosis)
combFit <- train(diagnosis~.,method="rf",data=predComb)
combPred <- predict(combFit,predComb)
cmRf <- confusionMatrix(predRf,testing$diagnosis)
cmGbm <- confusionMatrix(predGbm,testing$diagnosis)
cmLda <- confusionMatrix(predLda,testing$diagnosis)
cmRf$summary
cmRf
cmGbm
cmLda
combFit
rm(list=ls())
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
fitLasso <- train(CompressiveStrength ~ .,data=training,method="lasso")
predLasso <- predict(fitLasso,testing)
cmLasso <- confusionMatrix(predLasso,testing$CompressiveStrength)
rm(list=ls())
library(glmnet)
install.packages("glmnet")
library(glmnet)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
View(training)
View(training[,-1])
View(training[,1:8])
set.seed(233)
x <- as.matrix(training[,1:8])
glmmod<-glmnet(x,y=training$CompressiveStrength,alpha=1,family='binomial')
pred <- x
pred
rm(x)
rm(pred)
set.seed(233)
fitLasso <- train(CompressiveStrength~.,data=training,method="lasso")
fitLasso
predLasso <- predict(fitLasso,testing)
cmLasso <- confusionMatrix(predLasso,testing$CompressiveStrength)
?plot.enet
plot(fitLasso)
plot(fitLasso,xvar="step")
?plot.enet
?enet
obj<-enet(training[,1:8],training$CompressiveStrength,lambda=1)
tx <- as.matrix(training[,1:8])
obj<-enet(tx,training$CompressiveStrength,lambda=1)
par(mfrow=c(2,2))
plot(obj)
par(mfrow=c(1,1))
plot(obj)
plot(obj,xvar="step")
plot(obj,xvar="penalty")
plot(obj,xvar="penalty",use.color)
plot(obj,xvar="penalty")
pwd()
getwd()
library(lubridate)
rm(list=ls())
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
?bats
fit <- bats(tstrain)
fit
forecast(fit,testing)
?forecast
forecast(fit)
testing
length(testing)
dims(testing)
dim(testing)
fc <- forecast(fit,h=235,level=95)
fc
plot(fc)
plot(fc,testing)
plot(fc,testing[,3])
testing[,3]
fc[.2]
fc[,2]
fc
fc[,2]
fc[2]
fc[4]
fc
colnames(fc)
colname(fc)
colNames(fc)
colnames(fc)
str(fc_)
str(fc)
fc$upper
fc$lower
fc
n <- data.frame(fc$lower,testing[,3],fc$upper)
n
n[n[,2]>n[,3]]
n
colnames(n)
n[n$testing...3.>fc.upper]
n[n$testing...3.>n$fc.upper]
n$1
n[,1]
n[n[,2]>n[,3]]
n[,3]
n[,2]>n[,3]
n[n[,2]>n[,3]]
over <- n[,2]>n[,3]
n[over]
length(over==true)
length(over==TRUE)
over==TRUE
(235-9)/235
rm(list=ls())
set.seed(3523)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
install.packages("e1071")
?e1071
??e1071
library(e1071)
fit <- svm(CompressiveStrength ~ .,data=training)
pred <- predict(fit, testing)
fit
str(fit)
fit$tot.MSE
sqrt(sum((pred-testing$CompressiveStrength)^2))
sqrt(sum((pred-testing$CompressiveStrength)^2)/256)
rm(list=ls())
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
require(rCharts)
require(devtools)
install_github('rCharts', 'ramnathv')
library(plyr)
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("RCurl")
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("Rcpp")
require(devtools)
install_github('rCharts', 'ramnathv')
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
x = c(0:1:.01)
x = c[0:1:.01]
0:1:.1
0:1
range(0,1)
range(0,1,.1)
range(0,1,step=.1)
x=0:100
x
x = x/100
x
plot(dbeta(x,.5,.5))
plot(dbeta(x,2,4))
plot(dbeta(x,4,2))
plot(dbeta(x,1,1))
plot(dbeta(x,.2,1))
shiny::runApp('shiny app')
shiny::runApp('shiny app')
shiny::runApp('shiny app')
shiny::runApp('shiny app')
1==1
shiny::runApp('shiny app')
shiny::runApp('shiny app')
shiny::runApp('shiny app')
shiny::runApp('shiny app')
install.packages("devtools")
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
library('slidify')
library(slidify)
install_github('slidify','ramnathv')
slidify()
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("rtools")
install.packages('devtools')
library(devtools)
find_rtools()
install_github('slidify','ramnathv')
install_version("stringr", version="0.6.2", type = "source")
install_github('slidify','ramnathv')
install.packages("devtools")
library(devtools)
install_github('slidify','ramnathv')
update.packages()
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
getwd()
setwd("~/slidify deck")
setwd("~/RWork/slidify deck")
author("first_deck")
library(slidify)
author("first_deck")
framework   : shower        # {io2012, html5slides, shower, dzslides, ...}
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
shiny::runApp('~/RWork/shiny app')
shiny::runApp('~/RWork/shiny app')
seq(0,1,101)
seq(0,1,length=101)
shiny::runApp('~/RWork/shiny app')
shiny::runApp('~/RWork/shiny app')
shiny::runApp('~/RWork/shiny app')
For more information, see the [Beta Distribution article on Wikipedia](https://en.wikipedia.org/wiki/Beta_distribution).
The Beta distribution is a family of continuous probability distributions whose shapes are controlled by two positive shape parameters, denoted by \alpha and \beta.  The app allows the user to adjust the shape parameters dynamically to see the effect on the PDF and CDF of the Beta.
The Beta distribution is a family of continuous probability distributions whose shapes are controlled by two positive shape parameters, denoted by $\alpha$ and $\beta$.  The app allows the user to adjust the shape parameters dynamically to see the effect on the PDF and CDF of the Beta.
expression(alpha)
